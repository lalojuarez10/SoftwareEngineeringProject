{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Important note: When you see dispatch it's calling the appropiate reducer -> switch case based on action type\n// Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  }); // Calls the authReducer = store\n\n  axios.get('/api/auth/user', tokenConfig(getState)) // fetch the user from our backend = DB\n  .then(res => dispatch({\n    // Now that we fetched the user we want to store that into the store\n    type: USER_LOADED,\n    // action type\n    payload: res.data // user and token, note that res = to the object fethced from the DB\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status)); // errors function to add error info into the error state in errorReducer\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password,\n  streetAddress,\n  cityAddress,\n  stateAddress,\n  zipCode\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password,\n    streetAddress,\n    cityAddress,\n    stateAddress,\n    zipCode\n  });\n  axios.post('/api/users', body, config) // POST to the backend the new user\n  .then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    // Everything went okay and the user was created\n    payload: res.data // returns the user and token which is sent to the reducer\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL // Since the registration failed need to set everything in the reducer back to default = null\n\n    });\n  });\n}; // Login User\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/api/auth', body, config) // POST to the backend the new user\n  .then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    // Everything went okay and the user was created\n    payload: res.data // returns the user and token which is sent to the reducer\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL // Since the registration failed need to set everything in the reducer back to default = null\n\n    });\n  });\n}; // Logoout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get the token from the state meaning the token in our intialstate in authReducer\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    // Object\n    headers: {\n      // attribute of object of JSON type\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token; // add the token to it that's in local storage\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/Client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","streetAddress","cityAddress","stateAddress","zipCode","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\n// Important note: When you see dispatch it's calling the appropiate reducer -> switch case based on action type\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING })                       // Calls the authReducer = store\n\n  axios.get('/api/auth/user', tokenConfig(getState))     // fetch the user from our backend = DB\n    .then(res => dispatch({                         // Now that we fetched the user we want to store that into the store\n      type: USER_LOADED,                            // action type\n      payload: res.data                            // user and token, note that res = to the object fethced from the DB\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));                   // errors function to add error info into the error state in errorReducer\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n// Register User\nexport const register = ({ name, email, password, streetAddress, cityAddress, stateAddress, zipCode }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  // Request body\n  const body = JSON.stringify({ name, email, password, streetAddress, cityAddress, stateAddress, zipCode })\n\n  axios.post('/api/users', body, config)        // POST to the backend the new user\n    .then(res => dispatch({\n      type: REGISTER_SUCCESS,                   // Everything went okay and the user was created\n      payload: res.data                         // returns the user and token which is sent to the reducer\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL                    // Since the registration failed need to set everything in the reducer back to default = null\n      });\n    });\n}\n\n// Login User\nexport const login = ({ email, password }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  // Request body\n  const body = JSON.stringify({ email, password })\n\n  axios.post('/api/auth', body, config)        // POST to the backend the new user\n    .then(res => dispatch({\n      type: LOGIN_SUCCESS,                   // Everything went okay and the user was created\n      payload: res.data                         // returns the user and token which is sent to the reducer\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n      dispatch({\n        type: LOGIN_FAIL                    // Since the registration failed need to set everything in the reducer back to default = null\n      });\n    });\n}\n\n// Logoout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n  // Get the token from the state meaning the token in our intialstate in authReducer\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {                                  // Object\n    headers: {                                      // attribute of object of JSON type\n      \"Content-type\": \"application/json\"\n    }\n  }\n\n  // If token, add to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;    // add the token to it that's in local storage\n  }\n\n  return config;\n}"]},"metadata":{},"sourceType":"module"}