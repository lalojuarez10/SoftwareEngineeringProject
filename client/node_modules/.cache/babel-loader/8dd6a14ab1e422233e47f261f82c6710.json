{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js\";\n// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button, Modal, ModalHeader, ModalBody, Form } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; // connect the product store to the react component\n\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport CheckoutModal from './CheckoutModal';\n\nclass ProductsList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: '',\n      userID: ''\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.openModal = (itemName, id) => {\n      this.setState({\n        name: itemName,\n        userID: id\n      });\n      this.toggle();\n    };\n\n    this.onSubmit = (itemName, event) => {\n      event.preventDefault();\n      const newItem = {\n        name: this.state.name,\n        userID: this.props.user._id\n      }; // Add item via addItem action\n\n      this.props.addItem(newItem); // Close Modal\n\n      this.toggle();\n    };\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  } // Here we define the actual product component we want to render to the UI\n\n\n  render() {\n    const {\n      products\n    } = this.props.products;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      className: \"products-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, products.map(({\n      productID,\n      name\n    }) => React.createElement(CSSTransition, {\n      key: productID,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"addToCart-btn\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: this.openModal.bind(productID, name),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, name), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \" Add item to Shopping Cart?\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"yes\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: e => this.onSubmit(name, e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"YES\")))))))));\n  }\n\n} // Mapping the desired redux states(stores) from index.js to this component\n\n\nProductsList.propTypes = {\n  getProducts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  products: state.product,\n  // property: index reducer\n  user: state.auth.user // property: index reducer\n\n}); // Connect the Store to this component\n\n\nexport default connect(mapStateToProps, {\n  getProducts,\n  addItem\n})(ProductsList);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","Modal","ModalHeader","ModalBody","Form","CSSTransition","TransitionGroup","connect","getProducts","PropTypes","addItem","CheckoutModal","ProductsList","state","modal","name","userID","toggle","setState","openModal","itemName","id","onSubmit","event","preventDefault","newItem","props","user","_id","componentDidMount","render","products","map","productID","bind","e","propTypes","func","isRequired","mapStateToProps","product","auth"],"mappings":"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","sourcesContent":["// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form\n} from 'reactstrap';\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group';\n\nimport { connect } from 'react-redux'; // connect the product store to the react component\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport CheckoutModal from './CheckoutModal';\n\n\nclass ProductsList extends Component {\n  // State of the component\n  state = {\n    modal: false,\n    name: '',\n    userID: ''\n  }\n\n  // prop-types to document the intended types of properties passed to components\n  static propTypes = {\n    getProducts: PropTypes.func.isRequired,\n  };\n\n  // Toggle the modal to open and close\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  openModal = (itemName, id) => {\n    this.setState({\n      name: itemName,\n      userID: id\n    });\n\n    this.toggle();\n  }\n\n  onSubmit = (itemName, event) => {\n    event.preventDefault();\n    const newItem = {\n      name: this.state.name,\n      userID: this.props.user._id\n    }\n\n    // Add item via addItem action\n    this.props.addItem(newItem);\n\n    // Close Modal\n    this.toggle();\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  }\n\n  // Here we define the actual product component we want to render to the UI\n  render() {\n    const { products } = this.props.products;\n\n    return (\n      <Container>\n        <ListGroup>\n          <TransitionGroup className=\"products-list\">\n            {products.map(({ productID, name }) => (\n              <CSSTransition key={productID} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  <Button\n                    className=\"addToCart-btn\"\n                    color=\"dark\"\n                    size=\"sm\"\n                    onClick={this.openModal.bind(productID, name)}>\n                    {name}\n                  </Button>\n                  <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}> Add item to Shopping Cart?</ModalHeader>\n                    <ModalBody>\n                      <Button\n                        className=\"yes\"\n                        color=\"dark\"\n                        size=\"sm\"\n                        onClick={(e) => this.onSubmit(name, e)}>\n                        YES\n                        </Button>\n                    </ModalBody>\n                  </Modal>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\n// Mapping the desired redux states(stores) from index.js to this component\nconst mapStateToProps = (state) => ({\n  products: state.product,                 // property: index reducer\n  user: state.auth.user                    // property: index reducer\n});\n\n// Connect the Store to this component\nexport default connect(mapStateToProps, { getProducts, addItem })(ProductsList);"]},"metadata":{},"sourceType":"module"}