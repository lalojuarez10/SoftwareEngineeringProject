{"ast":null,"code":"// Product Reducer = Product Store \n// Holds the state\nimport { GET_PRODUCTS, PRODUCTS_LOADING } from '../actions/types'; // This is the store, holds all information of the products\n\nconst initialState = {\n  products: [],\n  // Array of products that we can bring in from the backend\n  loading: false // determines whether the products are still being loaded in from the backend\n\n}; // This function takes in the current state of the store, i.e it can change\n// This function takes in a type of action that we want to do the store\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_PRODUCTS:\n      return { ...state,\n        // Make a copy of the store\n        products: action.payload,\n        // Attach the payload which holds the data sent = products from backend\n        loading: false\n      };\n\n    case PRODUCTS_LOADING:\n      return { ...state,\n        // Make a copy of the store\n        loading: true // Currently loading the products from the backend\n\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/reducers/productReducer.js"],"names":["GET_PRODUCTS","PRODUCTS_LOADING","initialState","products","loading","state","action","type","payload"],"mappings":"AAAA;AACA;AAEA,SAASA,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AACc;AACjCC,EAAAA,OAAO,EAAE,KAFU,CAEa;;AAFb,CAArB,C,CAKA;AACA;;AACA,eAAe,UAAUC,KAAK,GAAGH,YAAlB,EAAgCI,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,YAAL;AACE,aAAO,EACL,GAAGK,KADE;AACwB;AAC7BF,QAAAA,QAAQ,EAAEG,MAAM,CAACE,OAFZ;AAEwB;AAC7BJ,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKH,gBAAL;AACE,aAAO,EACL,GAAGI,KADE;AACsB;AAC3BD,QAAAA,OAAO,EAAE,IAFJ,CAEsB;;AAFtB,OAAP;;AAIF;AACE,aAAOC,KAAP;AAbJ;AAeD","sourcesContent":["// Product Reducer = Product Store \n// Holds the state\n\nimport { GET_PRODUCTS, PRODUCTS_LOADING } from '../actions/types';\n\n// This is the store, holds all information of the products\nconst initialState = {\n  products: [],                    // Array of products that we can bring in from the backend\n  loading: false                  // determines whether the products are still being loaded in from the backend\n}\n\n// This function takes in the current state of the store, i.e it can change\n// This function takes in a type of action that we want to do the store\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_PRODUCTS:\n      return {\n        ...state,                    // Make a copy of the store\n        products: action.payload,    // Attach the payload which holds the data sent = products from backend\n        loading: false\n      }\n    case PRODUCTS_LOADING:\n      return {\n        ...state,                  // Make a copy of the store\n        loading: true              // Currently loading the products from the backend\n      }\n    default:\n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}