{"ast":null,"code":"//Where our actual state actually goes\n//where we check our actions, getItems action for ex\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types'; // this is the store, holds all the information\n\nconst intialState = {\n  items: [],\n  // empty array, since it comes from the server = DB\n  loading: false // when fetching data it can take a few ms\n\n}; // Create a case for each type of action in ItemAction.js\n\nexport default function (state = intialState, action) {\n  // state is from above for now, action has a type\n  switch (action.type) {\n    case GET_ITEMS:\n      return { ...state,\n        // making a copy of the state of the current state\n        items: action.payload,\n        // we add items to the current state that come from action.payload\n        loading: false\n      };\n\n    case DELETE_ITEM:\n      return { ...state,\n        items: state.items.filter(item => item.id != action.payload)\n      };\n\n    case ADD_ITEM:\n      return { ...state,\n        items: [action.payload, ...state.items] // add new item to the existing state items\n\n      };\n\n    case ITEMS_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n    // returns initial state for now\n  }\n}","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/reducers/itemReducer.js"],"names":["GET_ITEMS","ADD_ITEM","DELETE_ITEM","ITEMS_LOADING","intialState","items","loading","state","action","type","payload","filter","item","id"],"mappings":"AAAA;AACA;AAEA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,aAA3C,QAAgE,kBAAhE,C,CAEA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AACsC;AACxDC,EAAAA,OAAO,EAAE,KAFS,CAEsC;;AAFtC,CAApB,C,CAIA;;AACA,eAAe,UAAUC,KAAK,GAAGH,WAAlB,EAA+BI,MAA/B,EAAuC;AAAM;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKT,SAAL;AACE,aAAO,EACL,GAAGO,KADE;AACoB;AACzBF,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAFT;AAEoB;AACzBJ,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKJ,WAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYM,MAAZ,CAAmBC,IAAI,IAAIA,IAAI,CAACC,EAAL,IAAWL,MAAM,CAACE,OAA7C;AAFF,OAAP;;AAIF,SAAKT,QAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELF,QAAAA,KAAK,EAAE,CAACG,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACF,KAA1B,CAFF,CAEsC;;AAFtC,OAAP;;AAIF,SAAKF,aAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELD,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF;AACE,aAAOC,KAAP;AAAyB;AAvB7B;AAyBD","sourcesContent":["//Where our actual state actually goes\n//where we check our actions, getItems action for ex\n\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from '../actions/types';\n\n// this is the store, holds all the information\nconst intialState = {\n  items: [],                                              // empty array, since it comes from the server = DB\n  loading: false                                          // when fetching data it can take a few ms\n}\n// Create a case for each type of action in ItemAction.js\nexport default function (state = intialState, action) {     // state is from above for now, action has a type\n  switch (action.type) {\n    case GET_ITEMS:\n      return {\n        ...state,                // making a copy of the state of the current state\n        items: action.payload,   // we add items to the current state that come from action.payload\n        loading: false\n      };\n    case DELETE_ITEM:\n      return {\n        ...state,\n        items: state.items.filter(item => item.id != action.payload)\n      }\n    case ADD_ITEM:\n      return {\n        ...state,\n        items: [action.payload, ...state.items]    // add new item to the existing state items\n      };\n    case ITEMS_LOADING:\n      return {\n        ...state,\n        loading: true\n      }\n    default:\n      return state;            // returns initial state for now\n  }\n}"]},"metadata":{},"sourceType":"module"}