{"ast":null,"code":"// Errors State\nimport { GET_ERRORS, CLEAR_ERRORS } from '../actions/types'; // create our initial state, which is an object\n\nconst intialState = {\n  msg: {},\n  // JSON object, empty since comes from server\n  status: null,\n  id: null\n}; // Takes in a state which comes from server and an action that comes from the actions file\n\nexport default function (state = intialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return {\n        // returns an JSON object with\n        msg: action.payload.msg,\n        // message that's in the payload\n        status: action.payload.status,\n        // status that's in the payload\n        id: action.payload.id // id that's in the payload -> Good for debugging\n\n      };\n\n    case CLEAR_ERRORS:\n      // Set everything to default \n      return { // so we don't want old errors hanging out in our state\n        ...state,\n        msg: {},\n        status: null,\n        id: null\n      };\n  }\n}","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/reducers/errorReducer.js"],"names":["GET_ERRORS","CLEAR_ERRORS","intialState","msg","status","id","state","action","type","payload"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,YAArB,QAAyC,kBAAzC,C,CAEA;;AACA,MAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,EADa;AACe;AACjCC,EAAAA,MAAM,EAAE,IAFU;AAGlBC,EAAAA,EAAE,EAAE;AAHc,CAApB,C,CAMA;;AACA,eAAe,UAAUC,KAAK,GAAGJ,WAAlB,EAA+BK,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,UAAL;AACE,aAAO;AAAsC;AAC3CG,QAAAA,GAAG,EAAEI,MAAM,CAACE,OAAP,CAAeN,GADf;AACsC;AAC3CC,QAAAA,MAAM,EAAEG,MAAM,CAACE,OAAP,CAAeL,MAFlB;AAEqC;AAC1CC,QAAAA,EAAE,EAAEE,MAAM,CAACE,OAAP,CAAeJ,EAHd,CAGqC;;AAHrC,OAAP;;AAKF,SAAKJ,YAAL;AAA8C;AAC5C,aAAO,EAAoC;AACzC,WAAGK,KADE;AAELH,QAAAA,GAAG,EAAE,EAFA;AAGLC,QAAAA,MAAM,EAAE,IAHH;AAILC,QAAAA,EAAE,EAAE;AAJC,OAAP;AARJ;AAeD","sourcesContent":["// Errors State\nimport { GET_ERRORS, CLEAR_ERRORS } from '../actions/types';\n\n// create our initial state, which is an object\nconst intialState = {\n  msg: {},                         // JSON object, empty since comes from server\n  status: null,\n  id: null\n}\n\n// Takes in a state which comes from server and an action that comes from the actions file\nexport default function (state = intialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return {                                     // returns an JSON object with\n        msg: action.payload.msg,                   // message that's in the payload\n        status: action.payload.status,            // status that's in the payload\n        id: action.payload.id                     // id that's in the payload -> Good for debugging\n      }\n    case CLEAR_ERRORS:                            // Set everything to default \n      return {                                   // so we don't want old errors hanging out in our state\n        ...state,\n        msg: {},\n        status: null,\n        id: null\n      }\n  }\n}"]},"metadata":{},"sourceType":"module"}