{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ShoppingList.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport uuid from 'react-uuid'; //generate ids for items = static for now\n\nimport { connect } from 'react-redux'; // get state from redux into a react component\n\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onDeleteClick = id => {\n      this.props.deleteItem(id);\n    };\n  }\n\n  // an array of items, hardcoded for now will later be from the mongoDB\n  componentDidMount() {\n    // runs when component mounts such as making an API request\n    this.props.getItems();\n  }\n\n  render() {\n    const {\n      items\n    } = this.props.item; // {} = destructoring, we pull items from this.state and put into variable items\n\n    console.log(items);\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: () => {\n        const name = prompt('Enter Item');\n\n        if (name) {\n          this.setState(state => ({\n            items: [...items, {\n              id: uuid(),\n              name\n            }]\n          }));\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"Add Item\"), React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      className: \"shopping-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, items.map(({\n      id,\n      name\n    }) => React.createElement(CSSTransition, {\n      key: id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"remove-btn\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: this.onDeleteClick.bind(this, id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"\\xD7\"), name))))));\n  }\n\n}\n\nShoppingList.propTypes = {\n  getItems: PropTypes.func.isRequired,\n  // set the type to a function that is required\n  item: PropTypes.object.isRequired // object that represents our state\n\n};\n\nconst mapStateToProps = state => ({\n  item: state.item // based on reducer in index.js\n\n}); // since we are using connect to get state from redux we need to export using connect\n\n\nexport default connect(mapStateToProps, {\n  getItems,\n  deleteItem\n})(ShoppingList); //                   function, any actions we want to use, the component","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ShoppingList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","CSSTransition","TransitionGroup","uuid","connect","getItems","deleteItem","PropTypes","ShoppingList","onDeleteClick","id","props","componentDidMount","render","items","item","console","log","marginBottom","name","prompt","setState","state","map","bind","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button\n} from 'reactstrap';\nimport {\n  CSSTransition, \n  TransitionGroup\n} from 'react-transition-group';\nimport uuid from 'react-uuid';             //generate ids for items = static for now\nimport { connect } from 'react-redux';           // get state from redux into a react component\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n                           // an array of items, hardcoded for now will later be from the mongoDB\n  componentDidMount() {    // runs when component mounts such as making an API request\n    this.props.getItems();\n  }\n  \n  onDeleteClick = (id) => {\n      this.props.deleteItem(id);\n  }\n\n  render() {\n    const { items } = this.props.item;   // {} = destructoring, we pull items from this.state and put into variable items\n    console.log(items);\n    return(\n        <Container>\n            <Button \n            color=\"dark\" \n            style={{marginBottom: '2rem'}} \n            onClick={() => {\n                const name = prompt('Enter Item');\n                if(name) {\n                    this.setState(state => ({\n                        items: [...items, {id: uuid(), name}]\n                    }));\n                }\n            } }>\n              Add Item \n            </Button>\n            <ListGroup>\n                <TransitionGroup className=\"shopping-list\">\n                    {items.map(({id, name}) => (\n                      <CSSTransition key={id} timeout={500} classNames=\"fade\">\n                          <ListGroupItem>\n                            <Button\n                              className=\"remove-btn\"\n                              color=\"dark\"\n                              size=\"sm\"\n                              onClick={this.onDeleteClick.bind(this, id)}\n                            >\n                              &times;\n                            </Button>\n                              {name}\n                          </ListGroupItem>\n                      </CSSTransition>  \n                    ))}\n                </TransitionGroup>\n            </ListGroup>\n        </Container>\n    );\n  }\n}\n\nShoppingList.propTypes = {\n    getItems: PropTypes.func.isRequired,      // set the type to a function that is required\n    item: PropTypes.object.isRequired                   // object that represents our state\n};\n\nconst mapStateToProps = state => ({\n    item: state.item                        // based on reducer in index.js\n});\n\n// since we are using connect to get state from redux we need to export using connect\nexport default connect(mapStateToProps,\n     { getItems, deleteItem } )\n     (ShoppingList);\n//                   function, any actions we want to use, the component"]},"metadata":{},"sourceType":"module"}