{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ItemModal.js\";\n// Item component that we want to render to the UI\n// Once a user clicks on a product they will see this Item modal component\n// Yes = add product to the user's shopping cart\n// No = close the modal\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap'; // Connect the item store = itemReducer to this react component\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\n\nclass ItemModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      name: ''\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      // whatever was added to add item on UI\n      this.setState({\n        [e.target.name]: e.target.value\n      }); // e.target.name get's name from line 68, which comes from input to UI\n    };\n\n    this.onSubmit = e => {\n      // get input from UI button\n      e.preventDefault(); // prevent form actually submitting\n\n      const newItem = {\n        // create new item \n        name: this.state.name,\n        //whatever is typed into the input is update into state.name\n        userID: this.props.user._id\n      }; //Add item via addItem action\n\n      this.props.addItem(newItem); //close modal\n\n      this.toggle();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.isAuthenticated ? React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"AddItem\") : React.createElement(\"h4\", {\n      className: \"mb-3 ml-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Please log in to manage items\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Add to Shopping List\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Item\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"item\",\n      placeholder: \"Add shopping item\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Add Item\"))))));\n  }\n\n} // Here we can bring in any reducer from index.js\n\n\nItemModal.propTypes = {\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  item: state.item,\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user\n});\n\nexport default connect(mapStateToProps, {\n  addItem\n})(ItemModal);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ItemModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","connect","PropTypes","addItem","ItemModal","state","modal","name","toggle","setState","onChange","e","target","value","onSubmit","preventDefault","newItem","userID","props","user","_id","render","isAuthenticated","marginBottom","marginTop","propTypes","bool","mapStateToProps","item","auth"],"mappings":"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","sourcesContent":["// Item component that we want to render to the UI\n// Once a user clicks on a product they will see this Item modal component\n// Yes = add product to the user's shopping cart\n// No = close the modal\nimport React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from 'reactstrap';\n\n// Connect the item store = itemReducer to this react component\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\n\nclass ItemModal extends Component {\n  // State of the component\n  state = {\n    modal: false,\n    name: ''\n  }\n\n  // prop-types to document the intended types of properties passed to components\n  static propTypes = {\n    isAuthenticated: PropTypes.bool\n  }\n\n  // Toggle the modal to open and close\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  //  Takes event from user input\n  onChange = (e) => {                           // whatever was added to add item on UI\n    this.setState({ [e.target.name]: e.target.value }); // e.target.name get's name from line 68, which comes from input to UI\n  }\n\n  onSubmit = e => {                         // get input from UI button\n    e.preventDefault();                    // prevent form actually submitting\n\n    const newItem = {                     // create new item \n      name: this.state.name,            //whatever is typed into the input is update into state.name\n      userID: this.props.user._id\n    }\n\n    //Add item via addItem action\n    this.props.addItem(newItem);\n\n    //close modal\n    this.toggle();\n  }\n\n  render() {\n    return (\n      <div>\n        {this.props.isAuthenticated ? <Button\n          color=\"dark\"\n          style={{ marginBottom: '2rem' }}\n          onClick={this.toggle}\n        >AddItem</Button> : <h4 className=\"mb-3 ml-4\">Please log in to manage items</h4>}\n\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n        >\n          <ModalHeader toggle={this.toggle}>Add to Shopping List</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"item\">Item</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"item\"\n                  placeholder=\"Add shopping item\"\n                  onChange={this.onChange}\n                >\n                </Input>\n                <Button\n                  color=\"dark\"\n                  style={{ marginTop: '2rem' }}\n                  block\n                >\n                  Add Item\n                        </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n// Here we can bring in any reducer from index.js\nconst mapStateToProps = state => ({\n  item: state.item,\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth.user\n});\n\nexport default connect(mapStateToProps, { addItem })(ItemModal);"]},"metadata":{},"sourceType":"module"}