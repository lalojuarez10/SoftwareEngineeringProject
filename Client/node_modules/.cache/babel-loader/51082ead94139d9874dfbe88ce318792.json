{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Important note: When you see dispatch it's calling the appropiate reducer -> switch case based on action type\n// Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  }); // Calls the authReducer = store\n\n  axios.get('/api/auth/user', tokenConfig(getState)) // fetch the user from our backend = DB\n  .then(res => dispatch({\n    // Now that we fetched the user we want to store that into the store\n    type: USER_LOADED,\n    // action type\n    payload: res.data // user and token, note that res = to the object fethced from the DB\n\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status)); // errors function to add error info into the error state in errorReducer\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get the token from the state meaning the token in our intialstate in authReducer\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    // Object\n    headers: {\n      // attribute of object of JSON type\n      \"Content-type\": \"application/json\"\n    }\n  }; // If token, add to headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token; // add the token to it that's in local storage\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","token","auth","config","headers"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACEC,WADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,cANF,EAOEC,gBAPF,EAQEC,aARF,QASO,SATP,C,CAUA;AACA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR,CAFoD,CAEG;;AAEvDH,EAAAA,KAAK,CAACc,GAAN,CAAU,gBAAV,EAA4BC,WAAW,CAACH,QAAD,CAAvC,EAAkE;AAAlE,GACGI,IADH,CACQC,GAAG,IAAIN,QAAQ,CAAC;AAA0B;AAC9CE,IAAAA,IAAI,EAAEX,WADc;AAC0B;AAC9CgB,IAAAA,OAAO,EAAED,GAAG,CAACE,IAFO,CAEyB;;AAFzB,GAAD,CADvB,EAKGC,KALH,CAKSC,GAAG,IAAI;AACZV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR,CADY,CACsE;;AAClFZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD,GAVH;AAWD,CAfM,C,CAiBP;;AACA,OAAO,MAAMW,WAAW,GAAGH,QAAQ,IAAI;AACrC;AACA,QAAMY,KAAK,GAAGZ,QAAQ,GAAGa,IAAX,CAAgBD,KAA9B,CAFqC,CAIrC;;AACA,QAAME,MAAM,GAAG;AAAmC;AAChDC,IAAAA,OAAO,EAAE;AAAuC;AAC9C,sBAAgB;AADT;AADI,GAAf,CALqC,CAWrC;;AACA,MAAIH,KAAJ,EAAW;AACTE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC,CADS,CACkC;AAC5C;;AAED,SAAOE,MAAP;AACD,CAjBM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\n// Important note: When you see dispatch it's calling the appropiate reducer -> switch case based on action type\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING })                       // Calls the authReducer = store\n\n  axios.get('/api/auth/user', tokenConfig(getState))                // fetch the user from our backend = DB\n    .then(res => dispatch({                         // Now that we fetched the user we want to store that into the store\n      type: USER_LOADED,                            // action type\n      payload: res.data                            // user and token, note that res = to the object fethced from the DB\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));                   // errors function to add error info into the error state in errorReducer\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n  // Get the token from the state meaning the token in our intialstate in authReducer\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {                                  // Object\n    headers: {                                      // attribute of object of JSON type\n      \"Content-type\": \"application/json\"\n    }\n  }\n\n  // If token, add to headers\n  if (token) {\n    config.headers['x-auth-token'] = token;    // add the token to it that's in local storage\n  }\n\n  return config;\n}"]},"metadata":{},"sourceType":"module"}