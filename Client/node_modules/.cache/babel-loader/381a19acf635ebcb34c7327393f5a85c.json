{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/auth/RegisterModal.js\";\n// React component to register users \nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap'; //Container = component that's hooked to redux\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      // represents if the modal is open or not\n      name: '',\n      email: '',\n      password: '',\n      streetAddress: '',\n      cityAddress: '',\n      stateAddress: '',\n      zipCode: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      // Clear Errors\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      // whatever was added to add item on UI\n      this.setState({\n        [e.target.name]: e.target.value\n      }); // e.target.name get's name from line 68, which comes from input to UI\n    };\n\n    this.onSubmit = e => {\n      // get input from UI button\n      e.preventDefault(); // prevent form actually submitting\n\n      const {\n        name,\n        email,\n        password\n      } = this.state; // Create user object\n\n      const newUser = {\n        name,\n        email,\n        password\n      }; // Attempt to register\n\n      this.props.register(newUser);\n    };\n  }\n\n  //is invoked immediately after updating occurs. This method is not called for the initial render\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error != prevProps.error) {\n      // Check for register error\n      if (error.id == 'REGISTER_FAIL') {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // If the user is authenticated then close the modal\n\n\n    if (this.state.modal == true) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Register\"), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Register\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.state.msg ? React.createElement(Alert, {\n      color: \"danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, this.state.msg) : null, React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Name\"), React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"name\",\n      placeholder: \"Name\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Email\"), React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Password\"), React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"pasword\",\n      placeholder: \"Password\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Street Address\"), React.createElement(Input, {\n      type: \"streetAddress\",\n      name: \"streetAddress\",\n      id: \"streetAddress\",\n      placeholder: \"streetAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"City Address\"), React.createElement(Input, {\n      type: \"streetAddress\",\n      name: \"streetAddress\",\n      id: \"streetAddress\",\n      placeholder: \"streetAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"State Address\"), React.createElement(Input, {\n      type: \"streetAddress\",\n      name: \"streetAddress\",\n      id: \"streetAddress\",\n      placeholder: \"streetAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Label, {\n      for: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Zip Code\"), React.createElement(Input, {\n      type: \"streetAddress\",\n      name: \"streetAddress\",\n      id: \"streetAddress\",\n      placeholder: \"streetAddress\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Register\"))))));\n  }\n\n}\n\nRegisterModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  register: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  register,\n  clearErrors\n})(RegisterModal);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/auth/RegisterModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","register","clearErrors","RegisterModal","state","modal","name","email","password","streetAddress","cityAddress","stateAddress","zipCode","msg","toggle","props","setState","onChange","e","target","value","onSubmit","preventDefault","newUser","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["// React component to register users \nimport React, { Component } from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  NavLink,\n  Alert\n} from 'reactstrap';\n\n//Container = component that's hooked to redux\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { register } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass RegisterModal extends Component {\n  // state of the component\n  state = {\n    modal: false,                  // represents if the modal is open or not\n    name: '',\n    email: '',\n    password: '',\n    streetAddress: '',\n    cityAddress: '',\n    stateAddress: '',\n    zipCode: '',\n    msg: null\n  };\n\n  // prop-types to document the intended types of properties passed to component\n  static propTypes = {\n    isAuthenticated: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    register: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n  }\n\n  //is invoked immediately after updating occurs. This method is not called for the initial render\n  componentDidUpdate(prevProps) {\n    const { error, isAuthenticated } = this.props\n\n    if (error != prevProps.error) {\n      // Check for register error\n      if (error.id == 'REGISTER_FAIL') {\n        this.setState({ msg: error.msg.msg });\n      } else {\n        this.setState({ msg: null });\n      }\n    }\n    // If the user is authenticated then close the modal\n    if (this.state.modal == true) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  toggle = () => {\n    // Clear Errors\n    this.props.clearErrors();\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  onChange = (e) => {                           // whatever was added to add item on UI\n    this.setState({ [e.target.name]: e.target.value }); // e.target.name get's name from line 68, which comes from input to UI\n  }\n\n  onSubmit = e => {                         // get input from UI button\n    e.preventDefault();                    // prevent form actually submitting\n\n    const { name, email, password } = this.state;\n\n    // Create user object\n    const newUser = {\n      name,\n      email,\n      password\n    };\n\n    // Attempt to register\n    this.props.register(newUser);\n\n  }\n\n  render() {\n    return (\n      <div>\n        <NavLink onClick={this.toggle} href=\"#\">\n          Register\n        </NavLink>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n        >\n          <ModalHeader toggle={this.toggle}>Register</ModalHeader>\n          <ModalBody>\n            {this.state.msg ? <Alert color=\"danger\">{this.state.msg}</Alert> : null}\n            <Form onSubmit={this.onSubmit}>\n              <FormGroup>\n                <Label for=\"name\">Name</Label>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"name\"\n                  placeholder=\"Name\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                >\n\n                </Input>\n                <Label for=\"name\">Email</Label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"email\"\n                  placeholder=\"Email\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                >\n                </Input>\n\n                <Label for=\"name\">Password</Label>\n                <Input\n                  type=\"password\"\n                  name=\"password\"\n                  id=\"pasword\"\n                  placeholder=\"Password\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                >\n                </Input>\n\n                <Label for=\"name\">Street Address</Label>\n                <Input\n                  type=\"streetAddress\"\n                  name=\"streetAddress\"\n                  id=\"streetAddress\"\n                  placeholder=\"streetAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Label for=\"name\">City Address</Label>\n                <Input\n                  type=\"streetAddress\"\n                  name=\"streetAddress\"\n                  id=\"streetAddress\"\n                  placeholder=\"streetAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Label for=\"name\">State Address</Label>\n                <Input\n                  type=\"streetAddress\"\n                  name=\"streetAddress\"\n                  id=\"streetAddress\"\n                  placeholder=\"streetAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n                <Label for=\"name\">Zip Code</Label>\n                <Input\n                  type=\"streetAddress\"\n                  name=\"streetAddress\"\n                  id=\"streetAddress\"\n                  placeholder=\"streetAddress\"\n                  className=\"mb-3\"\n                  onChange={this.onChange}\n                ></Input>\n\n\n\n\n                <Button\n                  color=\"dark\"\n                  style={{ marginTop: '2rem' }}\n                  block\n                >\n                  Register\n                </Button>\n              </FormGroup>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, { register, clearErrors })(RegisterModal);"]},"metadata":{},"sourceType":"module"}