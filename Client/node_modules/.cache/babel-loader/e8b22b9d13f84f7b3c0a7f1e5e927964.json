{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ShoppingList.js\";\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; // get state from redux into a react component\n\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport { loadUser } from '../actions/authActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false\n    };\n\n    this.onDeleteClick = id => {\n      this.props.deleteItem(id);\n    };\n  }\n\n  componentDidMount() {\n    // runs when component mounts such as making an API request\n    this.props.getItems(this.props.user.user._id); // calls the redux (store) action to get all the items in the store\n\n    this.props.loadUser();\n  }\n\n  render() {\n    const {\n      items\n    } = this.props.item; // {} = destructoring, we pull items from this.state and put into variable items\n\n    const user = this.props.user.user._id;\n    const userItems = [];\n\n    const update = () => {\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].userID == user) {\n          userItems.push(items[i]);\n        }\n      }\n    };\n\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      className: \"shopping-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, items.map(({\n      user,\n      name\n    }) => React.createElement(CSSTransition, {\n      key: user,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, this.props.isAuthenticated ? React.createElement(Button, {\n      className: \"remove-btn\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: this.onDeleteClick.bind(this, user),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"\\xD7\") : null, name))))));\n  }\n\n} // takes in state and pass in an object(state.item), the function then returns an object with the field item which holds the state.item\n\n\nShoppingList.propTypes = {\n  getItems: PropTypes.func.isRequired,\n  // set the type to a function that is required\n  item: PropTypes.object.isRequired,\n  // object that represents our state\n  isAuthenticated: PropTypes.bool,\n  getUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  item: state.item,\n  // based on reducer in index.js\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth\n}); // since we are using connect to get state from redux we need to export using connect\n\n\nexport default connect(mapStateToProps, {\n  getItems,\n  deleteItem,\n  loadUser\n}) // any action you bring from import put here as well\n(ShoppingList); //                   function, any actions we want to use, the component","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ShoppingList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","Modal","ModalHeader","ModalBody","CSSTransition","TransitionGroup","connect","getItems","deleteItem","loadUser","PropTypes","ShoppingList","state","modal","onDeleteClick","id","props","componentDidMount","user","_id","render","items","item","userItems","update","i","length","userID","push","map","name","isAuthenticated","bind","propTypes","func","isRequired","object","bool","getUser","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from 'reactstrap';\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group';\nimport { connect } from 'react-redux';           // get state from redux into a react component\nimport { getItems, deleteItem } from '../actions/itemActions';\nimport { loadUser } from '../actions/authActions';\nimport PropTypes from 'prop-types';\n\nclass ShoppingList extends Component {\n  state = {\n    modal: false\n  }\n\n  // shopping list object will have the redux action getItems and will have item = our state\n  static propTypes = {\n    getItems: PropTypes.func.isRequired,      // set the type to a function that is required\n    item: PropTypes.object.isRequired,        // object that represents our state\n    isAuthenticated: PropTypes.bool,\n    getUser: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {    // runs when component mounts such as making an API request\n    this.props.getItems(this.props.user.user._id); // calls the redux (store) action to get all the items in the store\n    this.props.loadUser();\n  }\n\n  onDeleteClick = (id) => {\n    this.props.deleteItem(id);\n  }\n\n\n\n  render() {\n    const { items } = this.props.item;   // {} = destructoring, we pull items from this.state and put into variable items\n    const user = this.props.user.user._id;\n    const userItems = [];\n\n    const update = () => {\n      for (var i = 0; i < items.length; i++) {\n        if (items[i].userID == user) {\n          userItems.push(items[i]);\n        }\n      }\n    }\n\n\n    return (\n      <Container>\n        <ListGroup>\n          <TransitionGroup className=\"shopping-list\">\n            {items.map(({ user, name }) => (\n              <CSSTransition key={user} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  {this.props.isAuthenticated ? <Button\n                    className=\"remove-btn\"\n                    color=\"dark\"\n                    size=\"sm\"\n                    onClick={this.onDeleteClick.bind(this, user)}\n                  >\n                    &times;\n                            </Button> : null}\n\n                  {name}\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\n\n// takes in state and pass in an object(state.item), the function then returns an object with the field item which holds the state.item\nconst mapStateToProps = state => ({\n  item: state.item,                       // based on reducer in index.js\n  isAuthenticated: state.auth.isAuthenticated,\n  user: state.auth\n});\n\n// since we are using connect to get state from redux we need to export using connect\nexport default connect(mapStateToProps,\n  { getItems, deleteItem, loadUser })          // any action you bring from import put here as well\n  (ShoppingList);\n//                   function, any actions we want to use, the component"]},"metadata":{},"sourceType":"module"}