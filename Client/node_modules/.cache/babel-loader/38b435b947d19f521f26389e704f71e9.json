{"ast":null,"code":"var _jsxFileName = \"/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js\";\n// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport { Container, ListGroup, ListGroupItem, Button, Modal, ModalHeader, ModalBody } from 'reactstrap';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { connect } from 'react-redux'; // connect the product store to the react component\n\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\nimport { addItem } from '../actions/itemActions';\nimport e from 'express';\n\nclass ProductsList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false\n    };\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.addProductToShoppingList = event => {\n      e.preventDefault();\n    };\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  } // Here we define the actual product component we want to render to the UI\n\n\n  render() {\n    const {\n      products\n    } = this.props.products;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(ListGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(TransitionGroup, {\n      className: \"products-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, products.map(({\n      _id,\n      name\n    }) => React.createElement(CSSTransition, {\n      key: _id,\n      timeout: 500,\n      classNames: \"fade\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(ListGroupItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"addToCart-btn\",\n      color: \"dark\",\n      size: \"sm\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, name), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \" Add item to Shopping Cart?\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: this.addProductToShoppingList.bind(this, _id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"YES\")))))))));\n  }\n\n} // Mapping the desired redux states(stores) from index.js to this component\n\n\nProductsList.propTypes = {\n  getProducts: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  products: state.product // property: index reducer\n\n}); // Connect the Store to this component\n\n\nexport default connect(mapStateToProps, {\n  getProducts\n})(ProductsList);","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/components/ProductsList.js"],"names":["React","Component","Container","ListGroup","ListGroupItem","Button","Modal","ModalHeader","ModalBody","CSSTransition","TransitionGroup","connect","getProducts","PropTypes","addItem","e","ProductsList","state","modal","toggle","setState","addProductToShoppingList","event","preventDefault","componentDidMount","props","render","products","map","_id","name","marginBottom","bind","propTypes","func","isRequired","mapStateToProps","product"],"mappings":"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","sourcesContent":["// Product component that we want to render on the UI\n// Concept: Components let you split UI into independed pieces\n//          props are inputs\n//          Return what we want to appear on the screen\nimport React, { Component } from 'react';\nimport {\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from 'reactstrap';\nimport {\n  CSSTransition,\n  TransitionGroup\n} from 'react-transition-group';\n\nimport { connect } from 'react-redux'; // connect the product store to the react component\nimport { getProducts } from '../actions/productActions';\nimport PropTypes from 'prop-types';\n\nimport { addItem } from '../actions/itemActions';\nimport e from 'express';\n\nclass ProductsList extends Component {\n  // State of the component\n  state = {\n    modal: false\n  }\n\n  // prop-types to document the intended types of properties passed to components\n  static propTypes = {\n    getProducts: PropTypes.func.isRequired,\n  };\n\n  // Toggle the modal to open and close\n  toggle = () => {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  // Add product to user's shopping cart\n  addProductToShoppingList = (event) => {\n    e.preventDefault();\n\n\n  }\n\n  // Product component is rendered for the first time\n  componentDidMount() {\n    this.props.getProducts();\n  }\n\n  // Here we define the actual product component we want to render to the UI\n  render() {\n    const { products } = this.props.products;\n\n    return (\n      <Container>\n        <ListGroup>\n          <TransitionGroup className=\"products-list\">\n            {products.map(({ _id, name }) => (\n              <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                <ListGroupItem>\n                  <Button\n                    className=\"addToCart-btn\"\n                    color=\"dark\"\n                    size=\"sm\"\n                    onClick={this.toggle}>\n                    {name}\n                  </Button>\n                  <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}> Add item to Shopping Cart?</ModalHeader>\n                    <ModalBody>\n                      <Button\n                        color=\"dark\"\n                        style={{ marginBottom: '2rem' }}\n                        onClick={this.addProductToShoppingList.bind(this, _id)}>\n                        YES\n                        </Button>\n                    </ModalBody>\n                  </Modal>\n                </ListGroupItem>\n              </CSSTransition>\n            ))}\n          </TransitionGroup>\n        </ListGroup>\n      </Container>\n    );\n  }\n}\n\n// Mapping the desired redux states(stores) from index.js to this component\nconst mapStateToProps = (state) => ({\n  products: state.product                 // property: index reducer\n});\n\n// Connect the Store to this component\nexport default connect(mapStateToProps, { getProducts })(ProductsList);"]},"metadata":{},"sourceType":"module"}