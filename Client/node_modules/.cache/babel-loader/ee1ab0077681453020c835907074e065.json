{"ast":null,"code":"// make our requests to our backend\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\nimport axios from 'axios';\nimport { tokenConfig } from './authActions'; // Gets token from local storage\n\nimport { returnErrors } from './errorActions'; // each returns an action object with a type (and payload) field(s)\n// Component makes an action -> we use dispatch to send data from our backend \n\nexport const getItems = () => dispatch => {\n  dispatch(setItemsLoading()); // dispatch() to send the type to the reducer -> returns whatever is in the state and sets loading to true     \n\n  axios.get('/api/items') // get request to 'api/items' which is our backend\n  .then(res => dispatch({\n    // this gives us a response \n    type: GET_ITEMS,\n    payload: res.data // the data that comes from the backend\n\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\nexport const deleteItem = id => (dispatch, getState) => {\n  // takes in id to know which item to delete\n  axios.delete(`/api/items/userID/${id}`, tokenConfig(getState)).then(res => // Takes care of delete for the server = DB\n  dispatch({\n    // dispatch takes care of the delete for the reducer = store\n    type: DELETE_ITEM,\n    payload: id\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n}; // adding item from modal component -> action to post on backend -> item sent to the backend and saved\n\nexport const addItem = item => (dispatch, getState) => {\n  axios.post('/api/items', item, tokenConfig(getState)) // add items to the backend\n  .then(res => dispatch({\n    type: ADD_ITEM,\n    payload: res.data // data to be added to the backend\n\n  })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\nexport const setItemsLoading = () => {\n  return {\n    type: ITEMS_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/josejuarez/Desktop/UH/Software Engineering/Project/client/src/actions/itemActions.js"],"names":["GET_ITEMS","ADD_ITEM","DELETE_ITEM","ITEMS_LOADING","axios","tokenConfig","returnErrors","getItems","dispatch","setItemsLoading","get","then","res","type","payload","data","catch","err","response","status","deleteItem","id","getState","delete","addItem","item","post"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,WAA9B,EAA2CC,aAA3C,QAAgE,SAAhE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B,C,CAAgD;;AAChD,SAASC,YAAT,QAA6B,gBAA7B,C,CAEA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAMC,QAAQ,IAAI;AACxCA,EAAAA,QAAQ,CAACC,eAAe,EAAhB,CAAR,CADwC,CACS;;AACjDL,EAAAA,KAAK,CAACM,GAAN,CAAU,YAAV,EAAiD;AAAjD,GACGC,IADH,CACQC,GAAG,IAAIJ,QAAQ,CAAC;AAAwB;AAC5CK,IAAAA,IAAI,EAAEb,SADc;AAEpBc,IAAAA,OAAO,EAAEF,GAAG,CAACG,IAFO,CAEsB;;AAFtB,GAAD,CADvB,EAKGC,KALH,CAKSC,GAAG,IAAIT,QAAQ,CAACF,YAAY,CAACW,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CALxB;AAMD,CARM;AAUP,OAAO,MAAMC,UAAU,GAAIC,EAAD,IAAQ,CAACb,QAAD,EAAWc,QAAX,KAAwB;AAAM;AAC9DlB,EAAAA,KAAK,CAACmB,MAAN,CAAc,qBAAoBF,EAAG,EAArC,EAAwChB,WAAW,CAACiB,QAAD,CAAnD,EAA+DX,IAA/D,CAAoEC,GAAG,IAAS;AAC9EJ,EAAAA,QAAQ,CAAC;AAAuC;AAC9CK,IAAAA,IAAI,EAAEX,WADC;AAEPY,IAAAA,OAAO,EAAEO;AAFF,GAAD,CADV,EAKGL,KALH,CAKSC,GAAG,IAAIT,QAAQ,CAACF,YAAY,CAACW,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CALxB;AAMD,CAPM,C,CAQP;;AACA,OAAO,MAAMK,OAAO,GAAGC,IAAI,IAAI,CAACjB,QAAD,EAAWc,QAAX,KAAwB;AACrDlB,EAAAA,KAAK,CAACsB,IAAN,CAAW,YAAX,EAAyBD,IAAzB,EAA+BpB,WAAW,CAACiB,QAAD,CAA1C,EAAqE;AAArE,GACGX,IADH,CACQC,GAAG,IACPJ,QAAQ,CAAC;AACPK,IAAAA,IAAI,EAAEZ,QADC;AAEPa,IAAAA,OAAO,EAAEF,GAAG,CAACG,IAFN,CAE8B;;AAF9B,GAAD,CAFZ,EAMGC,KANH,CAMSC,GAAG,IAAIT,QAAQ,CAACF,YAAY,CAACW,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CANxB;AAOD,CARM;AAUP,OAAO,MAAMV,eAAe,GAAG,MAAM;AACnC,SAAO;AACLI,IAAAA,IAAI,EAAEV;AADD,GAAP;AAGD,CAJM","sourcesContent":["// make our requests to our backend\nimport { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING } from './types';\nimport axios from 'axios';\nimport { tokenConfig } from './authActions';    // Gets token from local storage\nimport { returnErrors } from './errorActions';\n\n// each returns an action object with a type (and payload) field(s)\n\n// Component makes an action -> we use dispatch to send data from our backend \nexport const getItems = () => dispatch => {\n  dispatch(setItemsLoading());                     // dispatch() to send the type to the reducer -> returns whatever is in the state and sets loading to true     \n  axios.get('/api/items')                          // get request to 'api/items' which is our backend\n    .then(res => dispatch({                       // this gives us a response \n      type: GET_ITEMS,\n      payload: res.data                         // the data that comes from the backend\n    }))\n    .catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\n\nexport const deleteItem = (id) => (dispatch, getState) => {     // takes in id to know which item to delete\n  axios.delete(`/api/items/userID/${id}`, tokenConfig(getState)).then(res =>      // Takes care of delete for the server = DB\n    dispatch({                                      // dispatch takes care of the delete for the reducer = store\n      type: DELETE_ITEM,\n      payload: id\n    }))\n    .catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\n// adding item from modal component -> action to post on backend -> item sent to the backend and saved\nexport const addItem = item => (dispatch, getState) => {\n  axios.post('/api/items', item, tokenConfig(getState))                // add items to the backend\n    .then(res =>\n      dispatch({\n        type: ADD_ITEM,\n        payload: res.data                    // data to be added to the backend\n      }))\n    .catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n};\n\nexport const setItemsLoading = () => {\n  return {\n    type: ITEMS_LOADING\n  }\n}"]},"metadata":{},"sourceType":"module"}